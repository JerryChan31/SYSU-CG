#version 330 core
in vec3 Normal;
in vec3 FragPos;
out vec4 FragColor;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform float ambientStrength;
uniform float specularStrength;
uniform float concentrate;
uniform float diffuseMutiple;

void main() {	
  // ambient effect
  vec3 ambient = ambientStrength * lightColor;

  // vector calculatation
  vec3 norm = normalize(Normal);
  vec3 lightDirection = normalize(lightPos - FragPos);
  vec3 viewDirection = normalize(viewPos - FragPos);
  vec3 reflectDirection = reflect(-lightDirection, norm);

  // diffuse effect
  float diff = max(dot(norm, lightDirection), 0.0);
  vec3 diffuse = diff * lightColor;

  // specular effect
  float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), concentrate);
  vec3 specular = specularStrength * spec * lightColor;

  // combining all factors & output
  vec3 result  = (ambient + diffuseMutiple * diffuse + specular) * objectColor;
  FragColor = vec4(result, 1.0);
}